{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Title","Typography","G","G2","getEngine","defaultOptions","name","notes","counter","config","appendPadding","angleField","colorField","radius","legend","label","type","labelHeight","formatter","data","mappingData","group","Group","addShape","attrs","x","y","width","height","r","fill","color","text","value","percent","toFixed","fontWeight","interactions","innerRadius","App","useState","editing","setEditing","optionName","setOptionName","optionNotes","setOptionNotes","totalVotes","setTotalVotes","options","setOptions","loading","setLoading","useEffect","setTimeout","handleRemoveOption","index","splice","handleCounter","delta","option","className","alt","src","process","direction","style","minWidth","map","split","key","display","alignItems","onClick","marginRight","justifyContent","level","marginTop","placeholder","onChange","e","target","htmlType","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.540c0386.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Divider, Form, Input, Space, Typography } from 'antd';\nimport { Pie, G2 } from '@ant-design/plots';\nimport 'antd/dist/antd.css';\nimport './style.scss';\n\nconst { Title } = Typography;\nconst G = G2.getEngine('canvas');\n\n// For BCI Voting Only\nconst defaultOptions = [\n  {\n    name: \"Diah Wihardini\",\n    notes: \"PhD in Education, Cal 2016\",\n    counter: 0,\n  },\n  {\n    name: \"Freddy Samad\",\n    notes: \"B. Sc. in Civil and Environmental Engineering, Cal 2000\",\n    counter: 0,\n  },\n];\n\nconst config = {\n  appendPadding: 10,\n  angleField: 'value',\n  colorField: 'type',\n  radius: 0.75,\n  legend: false,\n  label: {\n    type: 'spider',\n    labelHeight: 40,\n    formatter: (data, mappingData) => {\n      const group = new G.Group({});\n      group.addShape({\n        type: 'circle',\n        attrs: {\n          x: 0,\n          y: 0,\n          width: 40,\n          height: 50,\n          r: 5,\n          fill: mappingData.color,\n        },\n      });\n      group.addShape({\n        type: 'text',\n        attrs: {\n          x: 10,\n          y: 8,\n          text: `${data.type}`,\n          fill: mappingData.color,\n        },\n      });\n      group.addShape({\n        type: 'text',\n        attrs: {\n          x: 0,\n          y: 25,\n          text: `${data.value} - ${(data.percent * 100).toFixed(1)}%`,\n          fill: 'rgba(0, 0, 0, 0.65)',\n          fontWeight: 700,\n        },\n      });\n      return group;\n    },\n  },\n  interactions: [\n    {\n      type: 'element-selected',\n    },\n    {\n      type: 'element-active',\n    },\n  ],\n  innerRadius: 0.5,\n};\n\nfunction App() {\n  const [editing, setEditing] = useState(false);\n  const [optionName, setOptionName] = useState('');\n  const [optionNotes, setOptionNotes] = useState('');\n  const [totalVotes, setTotalVotes] = useState(0);\n  const [options, setOptions] = useState(defaultOptions);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLoading(false);\n    }, 1000);\n  });\n\n  const handleAddOption = () => {\n    if (optionName) {\n      const option = {\n        name: optionName,\n        notes: optionNotes,\n        counter: 0,\n      };\n      setOptionName('');\n      setOptionNotes('');\n      setOptions([ ...options, option ]);\n    }\n  };\n\n  const handleRemoveOption = (index) => () => {\n    options.splice(index, 1);\n    setOptions([ ...options ]);\n  }\n\n  const handleCounter = (index, delta) => () => {\n    const option = options[index];\n    \n    if (delta < 0 && option.counter === 0) {\n      return;\n    }\n    option.counter = option.counter + delta;\n    setOptions([ ...options ]);\n    setTotalVotes(totalVotes + delta)\n  };\n\n  return loading ? (\n    <div className=\"loader animate__animated animate__fadeOut\">\n      <img\n        alt=\"loading\"\n        className=\"loader-spin\"\n        src={`${process.env.PUBLIC_URL}/berkeley-bear.jpeg`}\n      />\n    </div>\n  ) : (\n    <div className=\"app animate__animated animate__fadeIn\">\n      <Space direction='vertical' className=\"app-section\">\n        <Pie style={{ minWidth: '800px' }} {...config} data={options.map(({ name, counter }) => ({ type: name, value: counter }))}/>\n        <Space direction='vertical' split={<Divider type=\"horizontal\" />}>\n          {options.map(({ name = '', counter = 0, notes = '' }, index) => {\n            return <div key={name} style={{ display: 'flex', alignItems: \"center\" }}>\n              {editing && <Button type=\"dashed\" onClick={handleRemoveOption(index)} style={{ marginRight: '16px' }} >-</Button>}\n              <Space style={{ display: 'flex', justifyContent: 'space-between', width: '100%' }}>\n                <div>\n                  <Title level={3}>{name}</Title>\n                  {notes}\n                </div>\n                <Divider type=\"vertical\" />\n                <Space>\n                  {totalVotes > 0 && `${counter} - ${(counter*100/totalVotes).toFixed(1)}%`}\n                  <Space>\n                    <Button onClick={handleCounter(index, 1)}>+</Button>    \n                    <Button onClick={handleCounter(index, -1)}>-</Button>    \n                  </Space>\n                </Space>\n              </Space>\n            </div>\n          })}\n        </Space>\n        <Button style={{ marginTop: '16px' }} type=\"dashed\" onClick={() => setEditing(!editing)}>\n          {editing ? 'Stop Editing' : 'Edit'}\n        </Button>\n        {\n          editing && <Form>\n            <Space>\n              <Input type=\"text\" placeholder=\"Option\" value={optionName} onChange={e => setOptionName(e.target.value)} />\n              <Input type=\"text\" placeholder=\"Optional Notes\" value={optionNotes} onChange={e => setOptionNotes(e.target.value)} />\n              <Button onClick={handleAddOption} htmlType=\"submit\">Add</Button>\n            </Space>\n          </Form>\n        }\n      </Space>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}